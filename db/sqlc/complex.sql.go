// Code generated by sqlc. DO NOT EDIT.
// source: complex.sql

package db

import (
	"context"
	"database/sql"
)

const createComplex = `-- name: CreateComplex :one
INSERT INTO complexes ("bitrix_id", "name")
VALUES ($1, $2)
RETURNING id, bitrix_id, name
`

type CreateComplexParams struct {
	BitrixID int64          `json:"bitrix_id"`
	Name     sql.NullString `json:"name"`
}

func (q *Queries) CreateComplex(ctx context.Context, arg CreateComplexParams) (Complex, error) {
	row := q.db.QueryRowContext(ctx, createComplex, arg.BitrixID, arg.Name)
	var i Complex
	err := row.Scan(&i.ID, &i.BitrixID, &i.Name)
	return i, err
}

const getComplex = `-- name: GetComplex :one
SELECT id, bitrix_id, name
FROM complexes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetComplex(ctx context.Context, id int64) (Complex, error) {
	row := q.db.QueryRowContext(ctx, getComplex, id)
	var i Complex
	err := row.Scan(&i.ID, &i.BitrixID, &i.Name)
	return i, err
}

const getComplexByBxID = `-- name: GetComplexByBxID :one
SELECT id, bitrix_id, name
FROM complexes
WHERE bitrix_id = $1
LIMIT 1
`

func (q *Queries) GetComplexByBxID(ctx context.Context, bitrixID int64) (Complex, error) {
	row := q.db.QueryRowContext(ctx, getComplexByBxID, bitrixID)
	var i Complex
	err := row.Scan(&i.ID, &i.BitrixID, &i.Name)
	return i, err
}

const getListAllComplexes = `-- name: GetListAllComplexes :many
SELECT id, bitrix_id, name
FROM complexes
`

func (q *Queries) GetListAllComplexes(ctx context.Context) ([]Complex, error) {
	rows, err := q.db.QueryContext(ctx, getListAllComplexes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Complex
	for rows.Next() {
		var i Complex
		if err := rows.Scan(&i.ID, &i.BitrixID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListComplex = `-- name: GetListComplex :many
SELECT id, bitrix_id, name
FROM complexes
ORDER BY name
LIMIT $1 OFFSET $2
`

type GetListComplexParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListComplex(ctx context.Context, arg GetListComplexParams) ([]Complex, error) {
	rows, err := q.db.QueryContext(ctx, getListComplex, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Complex
	for rows.Next() {
		var i Complex
		if err := rows.Scan(&i.ID, &i.BitrixID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
