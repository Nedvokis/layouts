// Code generated by sqlc. DO NOT EDIT.
// source: litter.sql

package db

import (
	"context"
	"database/sql"
)

const createLitter = `-- name: CreateLitter :one
INSERT INTO litters ("parent", "bitrix_id", "name")
VALUES ($1, $2, $3)
RETURNING id, parent, bitrix_id, name
`

type CreateLitterParams struct {
	Parent   int64          `json:"parent"`
	BitrixID int64          `json:"bitrix_id"`
	Name     sql.NullString `json:"name"`
}

func (q *Queries) CreateLitter(ctx context.Context, arg CreateLitterParams) (Litter, error) {
	row := q.db.QueryRowContext(ctx, createLitter, arg.Parent, arg.BitrixID, arg.Name)
	var i Litter
	err := row.Scan(
		&i.ID,
		&i.Parent,
		&i.BitrixID,
		&i.Name,
	)
	return i, err
}

const getListAllLitters = `-- name: GetListAllLitters :many
SELECT id, parent, bitrix_id, name
FROM litters
ORDER BY name
`

func (q *Queries) GetListAllLitters(ctx context.Context) ([]Litter, error) {
	rows, err := q.db.QueryContext(ctx, getListAllLitters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Litter
	for rows.Next() {
		var i Litter
		if err := rows.Scan(
			&i.ID,
			&i.Parent,
			&i.BitrixID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListLitters = `-- name: GetListLitters :many
SELECT id, parent, bitrix_id, name
FROM litters
ORDER BY name
LIMIT $1 OFFSET $2
`

type GetListLittersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListLitters(ctx context.Context, arg GetListLittersParams) ([]Litter, error) {
	rows, err := q.db.QueryContext(ctx, getListLitters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Litter
	for rows.Next() {
		var i Litter
		if err := rows.Scan(
			&i.ID,
			&i.Parent,
			&i.BitrixID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLitters = `-- name: GetLitters :one
SELECT id, parent, bitrix_id, name
FROM litters
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetLitters(ctx context.Context, id int64) (Litter, error) {
	row := q.db.QueryRowContext(ctx, getLitters, id)
	var i Litter
	err := row.Scan(
		&i.ID,
		&i.Parent,
		&i.BitrixID,
		&i.Name,
	)
	return i, err
}
